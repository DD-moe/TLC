        function drawYellowBlocks() {
            const canvas = document.getElementById("canvas");
            const ctx = canvas.getContext("2d");
            const draggables = document.querySelectorAll(".draggable");
            
            draggables.forEach(draggable => {
                const rect = draggable.getBoundingClientRect();
                const canvasRect = canvas.getBoundingClientRect();
                const y = Math.round((rect.top - canvasRect.top) / canvasRect.height * canvas.height);
                const height = Math.round((rect.height) / canvasRect.height * canvas.height);

                // Get image data from the area
                const imageData = ctx.getImageData(0, y, canvas.width, height);
                const reducedData = new Uint8ClampedArray(canvas.width); // Store 1px height data
                
                // Reduce height to 1 pixel (average Y-channel over height)
                for (let x = 0; x < canvas.width; x++) {
                    let sumY = 0;
                    for (let row = 0; row < height; row++) {
                        const index = (row * canvas.width + x) * 4;
                        const r = imageData.data[index];
                        const g = imageData.data[index + 1];
                        const b = imageData.data[index + 2];
                        const yChannel = 0.299 * r + 0.587 * g + 0.114 * b;
                        sumY += yChannel;
                    }
                    const avgY = Math.round(sumY / height);
                    reducedData[x] = avgY;
                }

                const changes = [];
                let pi = 0; // Początkowy indeks pasa jednakowych wartości

                for (let i = 1; i < canvas.width; i++) {
                    if (Number.isInteger(reducedData[i]) && Number.isInteger(reducedData[i - 1])) {
                        if (reducedData[i] !== reducedData[i - 1]) {
                            let vp = reducedData[i - 1];
                            let vn = reducedData[i];
                            let ni = i;
                            
                            // Sprawdź, czy różnica jest dokładnie 1 i wartości rosną
                            if (vn - vp === 1) {
                                changes.push({ vp, vn, pi, ni });
                            }
                            
                            // Zaktualizuj początkowy indeks dla następnego pasa
                            pi = i;
                        }
                    }
                }

                console.log("Y-channel changes:", changes);

            });
        }










                    // Regresja wielomianowa w czystym JavaScript
            function polynomialRegression(x, y, degree) {
                const matrix = [];
                for (let i = 0; i < x.length; i++) {
                    matrix[i] = [];
                    for (let j = 0; j <= degree; j++) {
                        matrix[i][j] = Math.pow(x[i], j);
                    }
                }
                
                // Rozwiązanie metodą pseudoodwrotności macierzy
                const transpose = (m) => m[0].map((_, i) => m.map(row => row[i]));
                const multiply = (a, b) => a.map(row => b[0].map((_, j) => row.reduce((sum, el, k) => sum + el * b[k][j], 0)));
                
                const XT = transpose(matrix);
                const XTX = multiply(XT, matrix);
                const XTY = multiply(XT, y.map(v => [v]));
                
                function gaussianElimination(A, b) {
                    const n = A.length;
                    for (let i = 0; i < n; i++) {
                        let maxRow = i;
                        for (let k = i + 1; k < n; k++) {
                            if (Math.abs(A[k][i]) > Math.abs(A[maxRow][i])) {
                                maxRow = k;
                            }
                        }
                        [A[i], A[maxRow]] = [A[maxRow], A[i]];
                        [b[i], b[maxRow]] = [b[maxRow], b[i]];
                        
                        for (let k = i + 1; k < n; k++) {
                            const c = -A[k][i] / A[i][i];
                            for (let j = i; j < n; j++) {
                                A[k][j] += c * A[i][j];
                            }
                            b[k][0] += c * b[i][0];
                        }
                    }
                    
                    const x = new Array(n).fill(0);
                    for (let i = n - 1; i >= 0; i--) {
                        let sum = 0;
                        for (let j = i + 1; j < n; j++) {
                            sum += A[i][j] * x[j];
                        }
                        x[i] = (b[i][0] - sum) / A[i][i];
                    }
                    return x;
                }
                
                return gaussianElimination(XTX, XTY);
            }



            /*
        const element$0 = document.querySelector(`[data-croffle-ref="element$0"]`);
        for (let i = 0; i < 5; i++) {
            const target = document.querySelector(`[data-croffle-ref="targetRef${i}"]`);
            const movable = new Moveable(element$0, {
                target: target,
                draggable: true,
                throttleDrag: 1,
                edgeDraggable: false,
                startDragRotate: 0,
                throttleDragRotate: 0,
                resizable: true,
                keepRatio: false,
                throttleResize: 1,
                renderDirections:  ["n", "s"]        
            });
            movable.on("drag", e => {
                e.target.style.top = `${e.top}px`;
            });
            movable.on("resize", e => {
                e.target.style.height = `${e.height}px`;
                e.target.style.transform = e.drag.transform;
            });

        } */